import 'dart:convert';
import 'dart:io';
import 'package:path/path.dart' as Path;
import 'package:dart_pubspec_licenses/dart_pubspec_licenses.dart' as oss;
import 'package:pubspec_parse/pubspec_parse.dart' as PubSpec;
import 'package:args/args.dart';

main(List<String> args) async {
  final parser = getArgParser();
  final arguments = parser.parse(args);

  try {
    if (arguments['help']) {
      printUsage(parser);
      return 0;
    } else if (oss.flutterDir == null) {
      print('FLUTTER_ROOT is not set.');
      return 1;
    } else if (arguments.rest.length > 0) {
      print('WARNING: extra parameter given\n');
      printUsage(parser);
      return 3;
    }

    final projectRoot = arguments['project-root'] ?? await findProjectRoot();
    final outputFilePath =
        arguments['output'] ?? Path.join(projectRoot, 'lib', 'ffmpeg_licenses.dart');
    final generateJson =
        arguments['json'] || Path.extension(outputFilePath).toLowerCase() == '.json';

    final Directory srcDir = Directory(Path.join(projectRoot, 'modules/ffmpeg/dist/mac/license'));
    final List<String> dirList = srcDir.listSync().map((e) => Path.basename(e.path)).toList()
      ..sort();

    final Map<String, dynamic> licenses = {};

    dirList.forEach((libraryName) {
      licenses[libraryName] = {
        'name': libraryName,
        'version': File(Path.join('${srcDir.path}', libraryName, 'VERSION'))
            .readAsLinesSync()
            .join('')
            .replaceFirst(RegExp(r'^[^\d]+'), ''),
        'license': File(Path.join('${srcDir.path}', libraryName, 'LICENSE'))
            .readAsLinesSync()
            .join('\n')
            .trimRight(),
      };
    });

    final String output;

    if (generateJson) {
      output = const JsonEncoder.withIndent('  ').convert(json);
    } else {
      final pubSpecContent = await File(Path.join(projectRoot, 'pubspec.yaml')).readAsString();
      final projectName = PubSpec.Pubspec.parse(pubSpecContent).name;
      final sb = StringBuffer();

      String escape(String s) => s.replaceAll('\'', '\\\'').replaceAll('\$', '\\\$');
      void writeIfNotNull(String name, dynamic obj) {
        if (obj == null) return;
        if (obj is List) {
          sb.write('    $name: [');
          for (int i = 0; i < obj.length; i++) {
            if (i > 0) sb.write(', ');
            sb.write('\'${escape(obj[i])}\'');
          }
          sb.writeln('],');
          return;
        }
        if (obj is! String) {
          sb.writeln('    $name: $obj,');
          return;
        }
        obj = escape(obj);
        if (obj.contains('\n')) {
          sb.writeln('    $name: \'\'\'$obj\'\'\',');
          return;
        }
        sb.writeln('    $name: \'$obj\',');
      }

      for (final l in licenses.values) {
        sb.writeln('  Package(');
        writeIfNotNull('name', l['name']);
        writeIfNotNull('description', '');
        writeIfNotNull('homepage', null);
        writeIfNotNull('repository', null);
        writeIfNotNull('authors', []);
        writeIfNotNull('version', l['version']);
        writeIfNotNull('license', l['license']);
        writeIfNotNull('isMarkdown', false);
        writeIfNotNull('isSdk', false);
        writeIfNotNull('isDirectDependency', false);
        sb.writeln('  ),');
      }

      output = '''
// cSpell:disable
import 'package:$projectName/oss_licenses.dart';

/// This code was generated by build_scripts/generate_ffmpeg_license_list.dart
final ffmpegLicenses = <Package>[
  ${sb.toString()}
];
''';
    }

    await File(outputFilePath).writeAsString(output);
    return 0;
  } catch (e, s) {
    stderr.writeln('$e: $s');
    return 4;
  }
}

Future<String> findProjectRoot({Directory? from}) async {
  from = from ?? Directory.current;
  if (await File(Path.join(from.path, 'pubspec.yaml')).exists()) {
    return from.path;
  }
  return findProjectRoot(from: from.parent);
}

ArgParser getArgParser() {
  final parser = ArgParser();

  parser.addOption('output', abbr: 'o', defaultsTo: null, help: '''
Specify output file path. If the file extension is .json, --json option is implied anyway.
The default output file path depends on the --json flag:
  with    --json: PROJECT_ROOT/assets/oss_licenses.json
  without --json: PROJECT_ROOT/lib/oss_licenses.dart
''');
  parser.addOption('project-root',
      abbr: 'p',
      defaultsTo: null,
      help: 'Explicitly specify project root directory that contains pubspec.lock.');
  parser.addFlag('json',
      abbr: 'j',
      defaultsTo: false,
      negatable: false,
      help: 'Generate JSON file rather than dart file.');
  parser.addFlag('help', abbr: 'h', defaultsTo: false, negatable: false, help: 'Show the help.');

  return parser;
}

void printUsage(ArgParser parser) {
  print('Usage: ${Path.basename(Platform.script.toString())} [OPTION]\n');
  print(parser.usage);
}
